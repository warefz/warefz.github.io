<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>书籍</title>
      <link href="/2019/06/11/%E4%B9%A6%E7%B1%8D/"/>
      <url>/2019/06/11/%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/06/11/test/"/>
      <url>/2019/06/11/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> humanities </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue修饰符</title>
      <link href="/2019/06/11/vue%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2019/06/11/vue%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为了方便大家写代码，vue.js给大家提供了很多方便的修饰符，比如我们经常用到的取消冒泡，阻止默认事件等等</p></blockquote><h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><h4 id="•-lazy"><a href="#•-lazy" class="headerlink" title="•    .lazy"></a>•    .lazy</h4><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;input type=&quot;text&quot; v-model=&quot;value&quot;&gt;</span><br><span class="line">   &lt;p&gt;&#123;&#123;value&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;input type=&quot;text&quot; v-model.lazy=&quot;value&quot;&gt;</span><br><span class="line">   &lt;p&gt;&#123;&#123;value&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样只有当我们光标离开输入框的时候，它才会更新视图，相当于在onchange事件触发更新。</p><h4 id="•-trim"><a href="#•-trim" class="headerlink" title="•    .trim"></a>•    .trim</h4><p>我们经常需要过滤一下一些输入框中无意键入的空格，这时可以给v-model添加trim修饰符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model.trim=&quot;value&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="•-number"><a href="#•-number" class="headerlink" title="•    .number"></a>•    .number</h4><p>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</span><br></pre></td></tr></table></figure><p>如果你先输入数字，那它就会限制你输入的只能是数字。<br>如果你先输入字符串，那它就相当于没有加.number</p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><h4 id="•-stop"><a href="#•-stop" class="headerlink" title="•    .stop"></a>•    .stop</h4><p>由于事件冒泡的机制，我们给元素绑定点击事件的时候，也会触发父级的点击事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click=&quot;test(2)&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;test(1)&quot;&gt;ok&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">//js</span><br><span class="line">test(e)&#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">&#125;</span><br><span class="line">//1</span><br><span class="line">//2</span><br></pre></td></tr></table></figure><p>给click事件绑定stop修饰符可以一键阻止事件冒泡，相当于调用了event.stopPropagation()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click=&quot;test(2)&quot;&gt;</span><br><span class="line">  &lt;button @click.stop=&quot;test(1)&quot;&gt;ok&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">//1</span><br></pre></td></tr></table></figure><h4 id="•-prevent"><a href="#•-prevent" class="headerlink" title="•    .prevent"></a>•    .prevent</h4><p>用于阻止事件的默认行为，例如，当点击提交按钮时阻止对表单的提交。相当于调用了event.preventDefault()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：修饰符可以同时使用多个,但是可能会因为顺序而有所不同。<br>用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。<br>也就是从左往右判断。</p></blockquote><h4 id="•-self"><a href="#•-self" class="headerlink" title="•    .self"></a>•    .self</h4><p>只当事件是从事件绑定的元素本身触发时才触发回调。像下面所示，刚刚我们从.stop时候知道子元素会冒泡到父元素导致触发父元素的点击事件，当我们加了这个.self以后，我们点击button不会触发父元素的点击事件test，只有当点击到父元素的时候（蓝色背景）才会test~从这个self的英文翻译过来就是‘自己，本身’可以看出这个修饰符的用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;blue&quot; @click.self=&quot;test(2)&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;test(1)&quot;&gt;ok&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="•-once"><a href="#•-once" class="headerlink" title="•    .once"></a>•    .once</h4><p>这个修饰符绑定了事件以后只能触发一次，第二次就不会触发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.once=&quot;test(1)&quot;&gt;ok&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>不像其它只能对原生的 DOM 事件起作用的修饰符，.once 修饰符还能被用到自定义的组件事件上。</p><h4 id="•-capture"><a href="#•-capture" class="headerlink" title="•    .capture"></a>•    .capture</h4><p>从上面我们知道了事件的冒泡，其实完整的事件机制是：捕获阶段–目标阶段–冒泡阶段。<br>默认的呢，是事件触发是从目标开始往上冒泡。<br>当我们加了这个.capture以后呢，我们就反过来了，事件触发从包含这个元素的顶层开始往下触发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click.capture=&quot;test(1)&quot;&gt;</span><br><span class="line">   obj1</span><br><span class="line">   &lt;div @click.capture=&quot;test(2)&quot;&gt;</span><br><span class="line">     obj2</span><br><span class="line">     &lt;div @click=&quot;test(3)&quot;&gt;</span><br><span class="line">       obj3</span><br><span class="line">       &lt;div @click=&quot;test(4)&quot;&gt;</span><br><span class="line">         obj4</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> // 1 2 4 3</span><br></pre></td></tr></table></figure><p>从上面这个例子我们点击obj4的时候，就可以清楚地看出区别，obj1，obj2在捕获阶段就触发了事件，因此是先1后2，后面的obj3，obj4是默认的冒泡阶段触发，因此是先4然后冒泡到3。</p><h4 id="•-passive"><a href="#•-passive" class="headerlink" title="•    .passive"></a>•    .passive</h4><p>当我们在监听元素滚动事件的时候，会一直触发onscroll事件，在pc端是没啥问题的，但是在移动端，会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="line">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><br><span class="line">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><br><span class="line">&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。</p></blockquote><h4 id="•-native"><a href="#•-native" class="headerlink" title="•    .native"></a>•    .native</h4><p>我们经常会写很多的小组件，有些小组件可能会绑定一些事件，但是，像下面这样绑定事件是不会触发的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;My-component @click=&quot;test(3)&quot;&gt;&lt;/My-component&gt;</span><br></pre></td></tr></table></figure><p>必须使用.native来修饰这个click事件（即&lt;My-component @click.native=”test(3)”&gt;），可以理解为该修饰符的作用就是把一个vue组件转化为一个普通的HTML标签，</p><blockquote><p>注意：使用.native修饰符来操作普通HTML标签是会令事件失效的</p></blockquote><h3 id="v-bind修饰符"><a href="#v-bind修饰符" class="headerlink" title="v-bind修饰符"></a>v-bind修饰符</h3><h4 id="•-sync-2-3-0-新增"><a href="#•-sync-2-3-0-新增" class="headerlink" title="•    .sync(2.3.0+ 新增)"></a>•    .sync(2.3.0+ 新增)</h4><p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。</p><p>这也是为什么我们推荐以 update:myPropName 的模式触发事件取而代之。举个例子，在一个包含 title prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&apos;update:title&apos;, newTitle)</span><br></pre></td></tr></table></figure><p>然后父组件可以监听那个事件并根据需要更新一个本地的数据属性。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document</span><br><span class="line">  v-bind:title=&quot;doc.title&quot;</span><br><span class="line">  v-on:update:title=&quot;doc.title = $event&quot;</span><br><span class="line">&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure><p>为了方便起见，我们为这种模式提供一个缩写，即 .sync 修饰符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document v-bind:title.sync=&quot;doc.title&quot;&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure><p>:title.sync=”isShow”其实是 @update:title=”tmp=&gt;title=tmp”语法糖。是其一种简写形式。</p><blockquote><p>注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 (例如 v-bind:title.sync=”doc.title + ‘!’” 是无效的)。取而代之的是，你只能提供你想要绑定的属性名，类似 v-model。<br>当我们用一个对象同时设置多个 prop 的时候，也可以将这个 .sync 修饰符和 v-bind 配合使用：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document v-bind.sync=&quot;doc&quot;&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure><p>这样会把 doc 对象中的每一个属性 (如 title) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 v-on 监听器。</p><blockquote><p>将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑。</p></blockquote><h4 id="•-prop"><a href="#•-prop" class="headerlink" title="•    .prop"></a>•    .prop</h4><p>要学习这个修饰符，我们首先要搞懂两个东西的区别。<br>Property：节点对象在内存中存储的属性，可以访问和设置。<br>Attribute：节点对象的其中一个属性( property )，值是一个对象。<br>在标签里定义的所有属性包括 HTML 属性和自定义属性都会在 attributes 对象里以键值对的方式存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//这里的id,value,style都属于property</span><br><span class="line">//index属于attribute</span><br><span class="line">//id、title等既是属性，也是特性。修改属性，其对应的特性会发生改变；修改特性，属性也会改变</span><br><span class="line">&lt;input id=&quot;uid&quot; title=&quot;title1&quot; value=&quot;1&quot; :index=&quot;index&quot;&gt;</span><br><span class="line">//input.index === undefined</span><br><span class="line">//input.attributes.index === this.index</span><br></pre></td></tr></table></figure><p>从上面我们可以看到如果直接使用v-bind绑定，则默认会绑定到dom节点的attribute。<br>为了通过自定义属性存储变量，避免暴露数据，防止污染 HTML 结构<br>我们可以使用这个修饰符，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=&quot;uid&quot; title=&quot;title1&quot; value=&quot;1&quot; :index.prop=&quot;index&quot;&gt;</span><br><span class="line">//input.index === this.index</span><br><span class="line">//input.attributes.index === undefined</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue官方教程</a><br><a href="https://segmentfault.com/a/1190000016786254" target="_blank" rel="noopener">Vue修饰符</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中watch用法</title>
      <link href="/2019/06/11/vue%E4%B8%ADwatch%E7%94%A8%E6%B3%95/"/>
      <url>/2019/06/11/vue%E4%B8%ADwatch%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在vue中，使用watch来响应数据的变化。watch的用法大致有三种。下面代码是watch的一种简单的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;cityName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &apos;#root&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        cityName: &apos;shanghai&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        cityName(newName, oldName) &#123;</span><br><span class="line">        // ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直接写一个监听处理函数，当每次监听到 cityName 值发生改变时，执行函数。也可以在所监听的数据后面直接加字符串形式的方法名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    cityName: &apos;nameChange&apos;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="immediate和handler"><a href="#immediate和handler" class="headerlink" title="immediate和handler"></a>immediate和handler</h3><p>这样使用watch时有一个特点，就是当值第一次绑定的时候，不会执行监听函数，只有值发生改变才会执行。如果我们需要在最初绑定值的时候也执行函数，则就需要用到immediate属性。</p><p>比如当父组件向子组件动态传值时，子组件props首次获取到父组件传来的默认值时，也需要执行函数，此时就需要将immediate设为true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#root&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    cityName: &apos;&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    cityName: &#123;</span><br><span class="line">    　　handler(newName, oldName) &#123;</span><br><span class="line">      　　// ...</span><br><span class="line">    　　&#125;,</span><br><span class="line">    　　immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>监听的数据后面写成对象形式，包含handler方法和immediate，之前我们写的函数其实就是在写这个handler方法；<br>immediate表示在watch中首次绑定的时候，是否执行handler，值为true则表示在watch中声明的时候，就立即执行handler方法，值为false，则和一般使用watch一样，在数据发生变化的时候才执行handler。</p><h3 id="deep"><a href="#deep" class="headerlink" title="deep"></a>deep</h3><p>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;cityName.name&quot;/&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#root&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    cityName: &#123;id: 1, name: &apos;shanghai&apos;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    cityName: &#123;</span><br><span class="line">      handler(newName, oldName) &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;,</span><br><span class="line">    deep: true,</span><br><span class="line">    immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>设置deep: true 则可以监听到cityName.name的变化，此时会给cityName的所有属性都加上这个监听器，当对象属性较多时，每个属性值的变化都会执行handler。如果只需要监听对象中的一个属性值，则可以做以下优化：使用字符串的形式监听对象属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    &apos;cityName.name&apos;: &#123;</span><br><span class="line">      handler(newName, oldName) &#123;</span><br><span class="line">      // ...</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true,</span><br><span class="line">      immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样只会给对象的某个特定的属性加监听器。</p><p>数组（一维、多维）的变化不需要通过深度监听，对象数组中对象的属性变化则需要deep深度监听。</p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>position中的sticky</title>
      <link href="/2019/06/11/position%E4%B8%AD%E7%9A%84sticky/"/>
      <url>/2019/06/11/position%E4%B8%AD%E7%9A%84sticky/</url>
      
        <content type="html"><![CDATA[<p>CSS的position有如下几种属性：</p><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</p><h4 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h4><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。</p><h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p><h4 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h4><p>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。</p><h4 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h4><p>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</p><h3 id="position-sticky"><a href="#position-sticky" class="headerlink" title="position:sticky"></a>position:sticky</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nav&#123;</span><br><span class="line">  position:sticky;</span><br><span class="line">  top:10px; /* 阈值 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>position属性中最有意思的就是sticky了，设置了sticky的元素，在屏幕范围（viewport）时该元素的位置并不受到定位影响（设置是top、left等属性无效），当该元素的位置将要移出偏移范围时，定位又会变成fixed，根据设置的left、top等属性成固定位置的效果。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>该元素并不脱离文档流，任然保留元素原本在文档流的位置 </li><li>当元素在容器中被滚动超过指定的偏移值的时候，元素在容器内固定在指定的位置上 </li><li>元素固定的相对偏移是相对于离他最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量<br>他是一个新的css3属性，他的表现类似于position:relative和position:fixed的合体，在目标区域在屏幕中是可见的时候，他的行为就像是position:relative,当目标滚动超出目标区域的时候，他的表现就像是fixed，他会固定在目标的位置。这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。它之所以会出现，也是因为监听scroll事件来实现粘性布局使浏览器进入慢滚动的模式，这与浏览器想要通过硬件加速来提升滚动的体验是相悖的。</li></ul><h4 id="生效条件"><a href="#生效条件" class="headerlink" title="生效条件"></a>生效条件</h4><p>需要注意的是，使用该属性有几个必要条件，否则会失效：</p><ul><li>父元素不能overflow:hidden或者overflow:auto属性。</li><li>必须指定top、bottom、left、right4个值之一，否则只会处于相对定位</li><li>父元素的高度不能低于sticky元素的高度</li><li>sticky元素仅在其父元素内生效</li></ul><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>　　<img src="/img/sticky.png" alt="sticky兼容性"></p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
