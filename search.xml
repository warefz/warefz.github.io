<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue处理边界情况</title>
      <link href="/2019/06/18/Vue%E5%A4%84%E7%90%86%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5/"/>
      <url>/2019/06/18/Vue%E5%A4%84%E7%90%86%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="访问元素-amp-组件"><a href="#访问元素-amp-组件" class="headerlink" title="访问元素 &amp; 组件"></a>访问元素 &amp; 组件</h1><p>在绝大多数情况下，我们最好不要触达另一个组件实例内部或手动操作 DOM 元素。不过也确实在一些情况下做这些事情是合适的。</p><h2 id="访问根实例"><a href="#访问根实例" class="headerlink" title="访问根实例"></a>访问根实例</h2><p>在每个 new Vue 实例的子组件中，其根实例可以通过 $root 属性进行访问。例如，在这个根实例中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue 根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    baz: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>所有的子组件都可以将这个实例作为一个全局 store 来访问或使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取根组件的数据</span></span><br><span class="line"><span class="keyword">this</span>.$root.foo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入根组件的数据</span></span><br><span class="line"><span class="keyword">this</span>.$root.foo = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问根组件的计算属性</span></span><br><span class="line"><span class="keyword">this</span>.$root.bar</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用根组件的方法</span></span><br><span class="line"><span class="keyword">this</span>.$root.baz()</span><br></pre></td></tr></table></figure></p><p>对于 demo 或非常小型的有少量组件的应用来说这是很方便的。不过这个模式扩展到中大型应用来说就不然了。因此在绝大多数情况下，我们强烈推荐使用 Vuex 来管理应用的状态。</p><h2 id="访问父级组件实例"><a href="#访问父级组件实例" class="headerlink" title="访问父级组件实例"></a>访问父级组件实例</h2><p>和 $root 类似，$parent 属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。</p><p>在绝大多数情况下，触达父级组件会使得你的应用更难调试和理解，尤其是当你变更了父级组件的数据的时候。当我们稍后回看那个组件的时候，很难找出那个变更是从哪里发起的。</p><p>另外在一些可能适当的时候，你需要特别地共享一些组件库。举个例子，在和 JavaScript API 进行交互而不渲染 HTML 的抽象组件内，诸如这些假设性的 Google 地图组件一样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">google-map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">google-map-markers</span> <span class="attr">v-bind:places</span>=<span class="string">"iceCreamShops"</span>&gt;</span><span class="tag">&lt;/<span class="name">google-map-markers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">google-map</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个 <google-map> 组件可以定义一个 map 属性，所有的子组件都需要访问它。在这种情况下 <google-map-markers> 可能想要通过类似 this.$parent.getMap 的方式访问那个地图，以便为其添加一组标记。你可以在这里查阅这种模式。</google-map-markers></google-map></p><p>请留意，尽管如此，通过这种模式构建出来的那个组件的内部仍然是容易出现问题的。比如，设想一下我们添加一个新的 <google-map-region> 组件，当 <google-map-markers> 在其内部出现的时候，只会渲染那个区域内的标记：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">google-map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">google-map-region</span> <span class="attr">v-bind:shape</span>=<span class="string">"cityBoundaries"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">google-map-markers</span> <span class="attr">v-bind:places</span>=<span class="string">"iceCreamShops"</span>&gt;</span><span class="tag">&lt;/<span class="name">google-map-markers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">google-map-region</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">google-map</span>&gt;</span></span><br></pre></td></tr></table></figure></google-map-markers></google-map-region></p><p>那么在 <google-map-markers> 内部你可能发现自己需要一些类似这样的 hack：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">this</span>.$parent.map || <span class="keyword">this</span>.$parent.$parent.map</span><br></pre></td></tr></table></figure></google-map-markers></p><p>很快它就会失控。这也是我们针对需要向任意更深层级的组件提供上下文信息时推荐依赖注入的原因。</p><h2 id="访问子组件实例或子元素"><a href="#访问子组件实例或子元素" class="headerlink" title="访问子组件实例或子元素"></a>访问子组件实例或子元素</h2><p>尽管存在 prop 和事件，有的时候你仍可能需要在 JavaScript 里直接访问一个子组件。为了达到这个目的，你可以通过 ref 特性为这个子组件赋予一个 ID 引用。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">"usernameInput"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在在你已经定义了这个 ref 的组件里，你可以使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.usernameInput</span><br></pre></td></tr></table></figure></p><p>来访问这个 <base-input> 实例，以便不时之需。比如程序化地从一个父级组件聚焦这个输入框。在刚才那个例子中，该 <base-input> 组件也可以使用一个类似的 ref 提供对内部这个指定元素的访问，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"input"</span>&gt;</span></span><br></pre></td></tr></table></figure></base-input></base-input></p><p>甚至可以通过其父级组件定义方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// 用来从父级组件聚焦输入框</span></span><br><span class="line">  focus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.input.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就允许父级组件通过下面的代码聚焦 <base-input> 里的输入框：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.usernameInput.focus()</span><br></pre></td></tr></table></figure></base-input></p><p>当 ref 和 v-for 一起使用的时候，你得到的引用将会是一个包含了对应数据源的这些子组件的数组。</p><p>$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 $refs。</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>在此之前，在我们描述访问父级组件实例的时候，展示过一个类似这样的例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">google-map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">google-map-region</span> <span class="attr">v-bind:shape</span>=<span class="string">"cityBoundaries"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">google-map-markers</span> <span class="attr">v-bind:places</span>=<span class="string">"iceCreamShops"</span>&gt;</span><span class="tag">&lt;/<span class="name">google-map-markers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">google-map-region</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">google-map</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这个组件里，所有 <google-map> 的后代都需要访问一个 getMap 方法，以便知道要跟哪个地图进行交互。不幸的是，使用 $parent 属性无法很好的扩展到更深层级的嵌套组件上。这也是依赖注入的用武之地，它用到了两个新的实例选项：provide 和 inject。</google-map></p><p>provide 选项允许我们指定我们想要提供给后代组件的数据/方法。在这个例子中，就是 <google-map> 内部的 getMap 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getMap: <span class="keyword">this</span>.getMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></google-map></p><p>然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject: [<span class="string">'getMap'</span>]</span><br></pre></td></tr></table></figure></p><p>相比 $parent 来说，这个用法可以让我们在任意后代组件中访问 getMap，而不需要暴露整个 <google-map> 实例。这允许我们更好的持续研发该组件，而不需要担心我们可能会改变/移除一些子组件依赖的东西。同时这些组件之间的接口是始终明确定义的，就和 props 一样。</google-map></p><p>实际上，你可以把依赖注入看作一部分“大范围有效的 prop”，除了：</p><ul><li>祖先组件不需要知道哪些后代组件使用它提供的属性</li><li>后代组件不需要知道被注入的属性来自哪里</li></ul><p>然而，依赖注入还是有负面影响的。它将你应用程序中的组件与它们当前的组织方式耦合起来，使重构变得更加困难。同时所提供的属性是非响应式的。这是出于设计的考虑，因为使用它们来创建一个中心化规模化的数据跟使用 $root做这件事都是不够好的。如果你想要共享的这个属性是你的应用特有的，而不是通用化的，或者如果你想在祖先组件中更新所提供的数据，那么这意味着你可能需要换用一个像 Vuex 这样真正的状态管理方案了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html" target="_blank" rel="noopener">Vue处理边界情况</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue使用key属性管理可复用元素</title>
      <link href="/2019/06/18/Vue%E4%BD%BF%E7%94%A8key%E5%B1%9E%E6%80%A7%E7%AE%A1%E7%90%86%E5%8F%AF%E5%A4%8D%E7%94%A8%E5%85%83%E7%B4%A0/"/>
      <url>/2019/06/18/Vue%E4%BD%BF%E7%94%A8key%E5%B1%9E%E6%80%A7%E7%AE%A1%E7%90%86%E5%8F%AF%E5%A4%8D%E7%94%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>最近在使用Vue开发项目时，遇到了如下的问题：<br>在使用v-if进行状态切换时，Vue会复用两部分中相同的组件，导致该组件的created和自定义指令(bind形式)等不执行，一些状态不会进行刷新。</p></blockquote><p>代码如下:<br>Test.vue文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fz-form</span> <span class="attr">ref</span>=<span class="string">"data"</span> <span class="attr">:model</span>=<span class="string">"addData"</span> <span class="attr">label-width</span>=<span class="string">"120px"</span> <span class="attr">v-if</span>=<span class="string">"step == 1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fz-form-item</span> <span class="attr">label</span>=<span class="string">"手机号："</span> <span class="attr">prop</span>=<span class="string">"phone"</span> <span class="attr">validate</span>=<span class="string">"required,Phone"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"用户名/手机号"</span> <span class="attr">v-model</span>=<span class="string">"addData.phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">fz-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fz-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fz-form</span> <span class="attr">ref</span>=<span class="string">"data1"</span> <span class="attr">:model</span>=<span class="string">"addData"</span> <span class="attr">label-width</span>=<span class="string">"120px"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fz-form-item</span>  <span class="attr">label</span>=<span class="string">"新密码："</span> <span class="attr">prop</span>=<span class="string">"password"</span> <span class="attr">validate</span>=<span class="string">"required,password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"addData.password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">fz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fz-form-item</span> <span class="attr">label</span>=<span class="string">"确认新密码："</span> <span class="attr">prop</span>=<span class="string">"endpassword"</span> <span class="attr">validate</span>=<span class="string">"required,password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"addData.endpassword"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">fz-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fz-form</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>FormItem.vue文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    directives: &#123;</span><br><span class="line">        validate: &#123;</span><br><span class="line">            bind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//bind中定义了el-form的验证规则</span></span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码的执行效果如下:<br><img src="/img/vuekeymg.png" alt><br>当从第一个表单切换到第二个表单时，vue会复用组件中的fz-form-item，而不会重新渲染该元素，这会使得该组件中的部分方法不执行，导致自定义的验证方法出现异常。</p><p>解决方法：<br>这里可以使用key对组件进行管理，可以在必要的地方避免组件复用，使得组件进行重新渲染。</p><h2 id="用key管理可复用的元素"><a href="#用key管理可复用的元素" class="headerlink" title="用key管理可复用的元素"></a>用key管理可复用的元素</h2><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。</p><p>同时 Vue 提供了一种方式来满足不复用已有元素的业务场景，此时只需要添加一个具有唯一值key属性。</p><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 track-by=”$index” 。</p><p>这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。理想的 key 值是每项都有的唯一 id。这个特殊的属性相当于 Vue 1.x 的 track-by ，但它的工作方式类似于一个属性，所以你需要用 v-bind 来绑定动态值 (在这里使用简写)：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/78727cf3ef14" target="_blank" rel="noopener">Vue 用 key 属性管理可复用的元素</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面通过拖拽选择文件</title>
      <link href="/2019/06/17/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E9%80%9A%E8%BF%87%E6%8B%96%E6%8B%BD%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6/"/>
      <url>/2019/06/17/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E9%80%9A%E8%BF%87%E6%8B%96%E6%8B%BD%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过处理拖拽事件可以让用户通过拖拽的方式将文件拖拽到应用中</p></blockquote><p>第一步是创建一个drop区域。虽然你网页内容的哪部分接受拖放取决于你的应用设计，但是使一个元素接收drop事件是很容易的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dropbox;</span><br><span class="line"></span><br><span class="line">dropbox = <span class="built_in">document</span>.getElementById(<span class="string">"dropbox"</span>);</span><br><span class="line">dropbox.addEventListener(<span class="string">"dragenter"</span>, dragenter, <span class="literal">false</span>);</span><br><span class="line">dropbox.addEventListener(<span class="string">"dragover"</span>, dragover, <span class="literal">false</span>);</span><br><span class="line">dropbox.addEventListener(<span class="string">"drop"</span>, drop, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，我们将ID为dropbox的元素变为了我们的drop区域。这个只需要给元素添加dragenter, dragover, 和drop 事件监听器就完成。<br>我们其实并不需要对dragenter and dragover 事件进行处理，所以这些函数都很简单。他们只需要包括禁止事件传播和阻止默认事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragenter</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragover</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键部分在drop()这个函数中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  e.preventDefault();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dt = e.dataTransfer;</span><br><span class="line">  <span class="keyword">var</span> files = dt.files;</span><br><span class="line"></span><br><span class="line">  handleFiles(files);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里，我们从事件中获取到了dataTransfer 这个域，然后从中得到文件列表，再将他们传递给handleFiles()函数。从这一点开始，处理文件的方法和用input元素或者用拖拽是一样的了。</p><h3 id="dataTransfer"><a href="#dataTransfer" class="headerlink" title="dataTransfer"></a>dataTransfer</h3><p>在进行拖放操作时，DataTransfer 对象用来保存，通过拖放动作，拖动到浏览器的数据。它可以保存一项或多项数据、一种或者多种数据类型。</p><p>拖放触发的拖放事件有一个dataTransfer属性，该属性值是一个DataTransfer对象，该对象包含如下属性和方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dataTransfer.dropEffect：设置或返回拖放目标上允许发生的拖放行为。如果此设置的拖放行为不在effectAllowed属性设置的多种拖放行为之内，拖放操作将会失败。该属性值只允许none、copy、link、move值之一。</span><br><span class="line"></span><br><span class="line">dataTransfer.effectAllowed：设置或返回被拖动元素允许发生的拖动行为。该属性值可设置为none、copy、copyLink、copyMove、link、linkMove、move、all、uninitialized。</span><br><span class="line"></span><br><span class="line">dataTransfer.files：包含一个在数据传输上所有可用的本地文件列表。如果拖动操作不涉及拖动文件，此属性是一个空列表。此属性访问指定的FileList 中无效的索引将返回未定义（undefined）。</span><br><span class="line"></span><br><span class="line">dataTransfer.types：types节保存一个被存储数据的类型列表作为第一项，顺序与被添加数据的顺序一致。如果没有添加数据将返回一个空列表。</span><br><span class="line"></span><br><span class="line">dataTransfer.setDragImage(element x,y)：设置拖放操作的自定义图标。其中element设置自定义图标，x设置图标与鼠标在水平方向的距离；y设置图标与鼠标在垂直方向的距离。</span><br><span class="line"></span><br><span class="line">dataTransfer.addElement(element)：添加自定义图标。</span><br><span class="line"></span><br><span class="line">dataTransfer.getData(format)：获取DataTransfer对象中设置format格式的数据。其中format代表数据格式，data代表数据。</span><br><span class="line"></span><br><span class="line">dataTransfer.setData(type,data): 为一个给定的类型设置数据。如果该数据类型不存在，它将添加到的末尾，这样类型列表中的最后一个项目将是新的格式。如果已经存在的数据类型，替换相同的位置的现有数据。</span><br><span class="line"></span><br><span class="line">dataTransfer.clearData([format])：清除DataTransfer对象中format格式的数据，如果省略format格式，则意味着清除DataTransfer对象中的全部数据。</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer" target="_blank" rel="noopener">MDN DataTransfer</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications" target="_blank" rel="noopener">Using files from web applications</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue父组件和子组件间的方法调用</title>
      <link href="/2019/06/17/Vue%E7%88%B6%E7%BB%84%E4%BB%B6%E5%92%8C%E5%AD%90%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/"/>
      <url>/2019/06/17/Vue%E7%88%B6%E7%BB%84%E4%BB%B6%E5%92%8C%E5%AD%90%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue父组件调用子组件方法"><a href="#Vue父组件调用子组件方法" class="headerlink" title="Vue父组件调用子组件方法"></a>Vue父组件调用子组件方法</h1><p>vue中如果父组件想调用子组件的方法，可以通过设置子组件的ref属性，然后通过this.$refs.ref.method调用，例如：</p><p>父组件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"fatherMethod"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'~/components/child.vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      fatherMethod() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.child.childMethods();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>子组件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'子组件'</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      childMethods() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在父组件中， this.$refs.child 返回的是一个vue实例，可以直接调用这个实例的方法</p><h1 id="子组件调用父组件方法"><a href="#子组件调用父组件方法" class="headerlink" title="子组件调用父组件方法"></a>子组件调用父组件方法</h1><p>Vue中子组件调用父组件的方法，这里有三种方法提供参考</p><h2 id="this-parent-event"><a href="#this-parent-event" class="headerlink" title="this.$parent.event"></a>this.$parent.event</h2><p>第一种方法是直接在子组件中通过this.$parent.event来调用父组件的方法<br>父组件:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'~/components/child'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      fatherMethod() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'父组件'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>子组件:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childMethod()"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      childMethod() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$parent.fatherMethod();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="this-emit-…"><a href="#this-emit-…" class="headerlink" title="this.$emit(…)"></a>this.$emit(…)</h2><p>第二种方法是在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了。<br>父组件:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">fatherMethod</span>=<span class="string">"fatherMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'~/components/child'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      fatherMethod() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'测试'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>子组件:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childMethod()"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      childMethod() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'fatherMethod'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="方法传入子组件"><a href="#方法传入子组件" class="headerlink" title="方法传入子组件"></a>方法传入子组件</h2><p>第三种是父组件把方法传入子组件中，在子组件里直接调用这个方法<br>父组件:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:fatherMethod</span>=<span class="string">"fatherMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'~/components/child'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      fatherMethod() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'父组件'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>子组件:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childMethod()"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      fatherMethod: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">null</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      childMethod() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.fatherMethod) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.fatherMethod();</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>三种都可以实现子组件调用父组件的方法，但是效率有所不同，根据实际需求选择合适的方法。</p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端图片格式转换</title>
      <link href="/2019/06/14/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/06/14/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="图片文件转base64"><a href="#图片文件转base64" class="headerlink" title="图片文件转base64"></a>图片文件转base64</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">change(file) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>,base64 = <span class="literal">null</span></span><br><span class="line">        fr = <span class="keyword">new</span> FileReader();</span><br><span class="line">    fr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        base64 = fr.result;</span><br><span class="line">    &#125;;</span><br><span class="line">    fr.readAsDataURL(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base64转2进制"><a href="#base64转2进制" class="headerlink" title="base64转2进制"></a>base64转2进制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">change(data, mime) &#123;</span><br><span class="line">data = data.split(<span class="string">','</span>)[<span class="number">1</span>];</span><br><span class="line">data = <span class="built_in">window</span>.atob(data);</span><br><span class="line"><span class="keyword">let</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(data.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">ia[i] = data.charCodeAt(i);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Blob([ia], &#123;</span><br><span class="line">type: mime</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2进制转base64"><a href="#2进制转base64" class="headerlink" title="2进制转base64"></a>2进制转base64</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">change(bytes)&#123;</span><br><span class="line">    <span class="keyword">let</span> bString = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = bytes.length; i &lt; len; ++i)&#123;</span><br><span class="line">        bString += <span class="built_in">String</span>.fromCharCode(bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> btoa(bString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="canvas绘制和压缩图片"><a href="#canvas绘制和压缩图片" class="headerlink" title="canvas绘制和压缩图片"></a>canvas绘制和压缩图片</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">paint(base64, bili, callback) &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.src = base64;</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">        <span class="keyword">let</span> w = <span class="keyword">this</span>.width / bili;</span><br><span class="line">        <span class="keyword">let</span> h = <span class="keyword">this</span>.height / bili;</span><br><span class="line">        canvas.setAttribute(<span class="string">"width"</span>, w);</span><br><span class="line">        canvas.setAttribute(<span class="string">"height"</span>, h);</span><br><span class="line">        canvas.getContext(<span class="string">"2d"</span>).drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="canvas转base64"><a href="#canvas转base64" class="headerlink" title="canvas转base64"></a>canvas转base64</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">let</span> base64 = canvas.toDataURL(<span class="string">"image/png"</span>);</span><br><span class="line"><span class="comment">//还可以传个参数做图片质量的设置，在指定图片格式为 image/jpeg 或 image/webp的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92</span></span><br></pre></td></tr></table></figure><h3 id="canvas转blob"><a href="#canvas转blob" class="headerlink" title="canvas转blob"></a>canvas转blob</h3><blockquote><p>HTMLCanvasElement.toBlob() 方法创造Blob对象，用以展示canvas上的图片</p></blockquote><p>void canvas.toBlob(callback, type, encoderOptions);</p><ul><li>callback<br>回调函数，可获得一个单独的Blob对象参数。</li><li>type 可选<br>DOMString类型，指定图片格式，默认格式为image/png。</li><li>encoderOptions 可选<br>Number类型，值在0与1之间，当请求图片格式为image/jpeg或者image/webp时用来指定图片展示质量。如果这个参数的值不在指定类型与范围之内，则使用默认值，其余参数将被忽略。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</span><br><span class="line">&#125;, <span class="string">"image/jpeg"</span>);</span><br></pre></td></tr></table></figure><h3 id="base64转blob"><a href="#base64转blob" class="headerlink" title="base64转blob"></a>base64转blob</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dataURItoBlob(base64Data) &#123;</span><br><span class="line">    <span class="keyword">let</span> byteString;</span><br><span class="line">    <span class="keyword">if</span>(base64Data.split(<span class="string">','</span>)[<span class="number">0</span>].indexOf(<span class="string">'base64'</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">        byteString = atob(base64Data.split(<span class="string">','</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        byteString = <span class="built_in">unescape</span>(base64Data.split(<span class="string">','</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">let</span> mimeString = base64Data.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteString.length);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; byteString.length; i++) &#123;</span><br><span class="line">        ia[i] = byteString.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([ia], &#123;</span><br><span class="line">        type: mimeString</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-image-crop-upload裁剪组件</title>
      <link href="/2019/06/14/vue-image-crop-upload%E8%A3%81%E5%89%AA%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/06/14/vue-image-crop-upload%E8%A3%81%E5%89%AA%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/vicp1.png" alt="效果图"></p><p>npm地址<a href="https://www.npmjs.com/package/vue-image-crop-upload" target="_blank" rel="noopener">https://www.npmjs.com/package/vue-image-crop-upload</a></p><p>git地址<a href="https://github.com/dai-siki/vue-image-crop-upload" target="_blank" rel="noopener">https://github.com/dai-siki/vue-image-crop-upload</a></p><p>样例地址<a href="https://dai-siki.github.io/vue-image-crop-upload/example/demo.html" target="_blank" rel="noopener">https://dai-siki.github.io/vue-image-crop-upload/example/demo.html</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">upload() &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            lang,</span><br><span class="line">            imgFormat,</span><br><span class="line">            mime,</span><br><span class="line">            url,</span><br><span class="line">            params,</span><br><span class="line">            headers,</span><br><span class="line">            field,</span><br><span class="line">            ki,</span><br><span class="line">            createImgUrl,</span><br><span class="line">            withCredentials</span><br><span class="line">        &#125; = <span class="keyword">this</span>,</span><br><span class="line">        fmData = <span class="keyword">new</span> FormData();</span><br><span class="line">    fmData.append(field, data2blob(createImgUrl, mime), field + <span class="string">'.'</span> + imgFormat);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加其他参数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> params == <span class="string">'object'</span> &amp;&amp; params) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(params).forEach(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">            fmData.append(k, params[k]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听进度回调</span></span><br><span class="line">    <span class="keyword">const</span> uploadProgress = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">            that.progress = <span class="number">100</span> * <span class="built_in">Math</span>.round(event.loaded) / event.total;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    that.reset();</span><br><span class="line">    that.loading = <span class="number">1</span>;</span><br><span class="line">    that.setStep(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        client.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</span><br><span class="line">        client.withCredentials = withCredentials;</span><br><span class="line">        client.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span> || <span class="keyword">this</span>.status === <span class="number">201</span>) &#123;</span><br><span class="line">                resolve(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="keyword">this</span>.status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        client.upload.addEventListener(<span class="string">'progress'</span>, uploadProgress, <span class="literal">false</span>); <span class="comment">//监听进度</span></span><br><span class="line">        <span class="comment">// 设置header</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> headers == <span class="string">'object'</span> &amp;&amp; headers) &#123;</span><br><span class="line">            <span class="built_in">Object</span>.keys(headers).forEach(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">                client.setRequestHeader(k, headers[k]);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        client.send(fmData);</span><br><span class="line">    &#125;).then(</span><br><span class="line">        <span class="comment">// 上传成功</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">resData</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (that.value) &#123;</span><br><span class="line">                that.loading = <span class="number">2</span>;</span><br><span class="line">                that.$emit(<span class="string">'crop-upload-success'</span>, resData, field, ki);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="comment">// 上传失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">sts</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (that.value) &#123;</span><br><span class="line">                that.loading = <span class="number">3</span>;</span><br><span class="line">                that.hasError = <span class="literal">true</span>;</span><br><span class="line">                that.errorMsg = lang.fail;</span><br><span class="line">                that.$emit(<span class="string">'crop-upload-fail'</span>, sts, field, ki);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="点击波纹效果"><a href="#点击波纹效果" class="headerlink" title="点击波纹效果"></a>点击波纹效果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">e, arg_opts</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> opts = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">ele: e.target, <span class="comment">// 波纹作用元素</span></span><br><span class="line">type: <span class="string">'hit'</span>, <span class="comment">// hit点击位置扩散　center中心点扩展</span></span><br><span class="line">bgc: <span class="string">'rgba(0, 0, 0, 0.15)'</span> <span class="comment">// 波纹颜色</span></span><br><span class="line">&#125;, arg_opts),</span><br><span class="line">target = opts.ele;</span><br><span class="line"><span class="keyword">if</span> (target) &#123;</span><br><span class="line"><span class="keyword">var</span> rect = target.getBoundingClientRect(),</span><br><span class="line">ripple = target.querySelector(<span class="string">'.e-ripple'</span>);</span><br><span class="line"><span class="keyword">if</span> (!ripple) &#123;</span><br><span class="line">ripple = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">ripple.className = <span class="string">'e-ripple'</span>;</span><br><span class="line">ripple.style.height = ripple.style.width = <span class="built_in">Math</span>.max(rect.width, rect.height) + <span class="string">'px'</span>;</span><br><span class="line">target.appendChild(ripple);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ripple.className = <span class="string">'e-ripple'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (opts.type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'center'</span>:</span><br><span class="line">ripple.style.top = (rect.height / <span class="number">2</span> - ripple.offsetHeight / <span class="number">2</span>) + <span class="string">'px'</span>;</span><br><span class="line">ripple.style.left = (rect.width / <span class="number">2</span> - ripple.offsetWidth / <span class="number">2</span>) + <span class="string">'px'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">ripple.style.top = (e.pageY - rect.top - ripple.offsetHeight / <span class="number">2</span> - <span class="built_in">document</span>.body.scrollTop) + <span class="string">'px'</span>;</span><br><span class="line">ripple.style.left = (e.pageX - rect.left - ripple.offsetWidth / <span class="number">2</span> - <span class="built_in">document</span>.body.scrollLeft) + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line">ripple.style.backgroundColor = opts.bgc;</span><br><span class="line">ripple.className = <span class="string">'e-ripple z-active'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="base64转2进制"><a href="#base64转2进制" class="headerlink" title="base64转2进制"></a>base64转2进制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">data, mime</span>) </span>&#123;</span><br><span class="line">data = data.split(<span class="string">','</span>)[<span class="number">1</span>];</span><br><span class="line">data = <span class="built_in">window</span>.atob(data);</span><br><span class="line"><span class="keyword">var</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(data.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">ia[i] = data.charCodeAt(i);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// canvas.toDataURL 返回的默认格式就是 image/png</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Blob([ia], &#123;</span><br><span class="line">type: mime</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack-dev-server的proxy用法</title>
      <link href="/2019/06/13/Webpack-dev-server%E7%9A%84proxy%E7%94%A8%E6%B3%95/"/>
      <url>/2019/06/13/Webpack-dev-server%E7%9A%84proxy%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ol><li>如果你有单独的后端开发服务器 API，并且希望在同域名下发送 API 请求 ，那么代理某些 URL 会很有用。</li><li>解决开发环境的跨域问题(不用在去配置nginx和host)</li></ol><h3 id="在webpack-config-js中配置"><a href="#在webpack-config-js中配置" class="headerlink" title="在webpack.config.js中配置"></a>在webpack.config.js中配置</h3><p>下面简单介绍一下五个经常使用的场景</p><h4 id="使用一"><a href="#使用一" class="headerlink" title="使用一"></a>使用一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mmodule.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>请求到 /api/xxx 现在会被代理到请求 localhost:3000/api/xxx, 例如 /api/user现在会被代理到请求 localhost:3000/api/user</p><h4 id="使用二"><a href="#使用二" class="headerlink" title="使用二"></a>使用二</h4><p>如果你想要代码多个路径代理到同一个target下, 你可以使用由一个或多个「具有 context 属性的对象」构成的数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: [&#123;</span><br><span class="line">            context: [<span class="string">'/auth'</span>, <span class="string">'/api'</span>],</span><br><span class="line">            target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="使用三"><a href="#使用三" class="headerlink" title="使用三"></a>使用三</h4><p>如果你不想始终传递 /api ，则需要重写路径：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                pathRewrite: &#123;<span class="string">'^/api'</span> : <span class="string">''</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>请求到 /api/xxx 现在会被代理到请求 localhost:3000/xxx, 例如 /api/user 现在会被代理到请求 localhost:3000/user</p><h4 id="使用四"><a href="#使用四" class="headerlink" title="使用四"></a>使用四</h4><p>默认情况下，不接受运行在 HTTPS 上，且使用了无效证书的后端服务器。如果你想要接受，只要设置 secure: false 就行。修改配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'https://other-server.example.com'</span>,</span><br><span class="line">                secure: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="使用五"><a href="#使用五" class="headerlink" title="使用五"></a>使用五</h4><p>有时你不想代理所有的请求。可以基于一个函数的返回值绕过代理。<br>在函数中你可以访问请求体、响应体和代理选项。必须返回 false 或路径，来跳过代理请求。<br>例如：对于浏览器请求，你想要提供一个 HTML 页面，但是对于 API 请求则保持代理。你可以这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                bypass: <span class="function"><span class="keyword">function</span>(<span class="params">req, res, proxyOptions</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (req.headers.accept.indexOf(<span class="string">'html'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'Skipping proxy for browser request.'</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'/index.html'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="解决跨域原理"><a href="#解决跨域原理" class="headerlink" title="解决跨域原理"></a>解决跨域原理</h3><p>上面的参数列表中有一个changeOrigin参数, 是一个布尔值, 设置为true, 本地就会虚拟一个服务器接收你的请求并代你发送该请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="vue-cli中proxyTable配置接口地址代理示例"><a href="#vue-cli中proxyTable配置接口地址代理示例" class="headerlink" title="vue-cli中proxyTable配置接口地址代理示例"></a>vue-cli中proxyTable配置接口地址代理示例</h3><p>修改 config/index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    dev: &#123;</span><br><span class="line">    <span class="comment">// 静态资源文件夹</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">    <span class="comment">// 发布路径</span></span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理配置表，在这里可以配置特定的请求代理到对应的API接口</span></span><br><span class="line">    <span class="comment">// 使用方法：https://vuejs-templates.github.io/webpack/proxy.html</span></span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">        <span class="comment">// 例如将'localhost:8080/api/xxx'代理到'https://wangyaxing.cn/api/xxx'</span></span><br><span class="line">        <span class="string">'/api'</span>: &#123;</span><br><span class="line">            target: <span class="string">'https://wangyaxing.cn'</span>, <span class="comment">// 接口的域名</span></span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 例如将'localhost:8080/img/xxx'代理到'https://cdn.wangyaxing.cn/xxx'</span></span><br><span class="line">        <span class="string">'/img'</span>: &#123;</span><br><span class="line">            target: <span class="string">'https://cdn.wangyaxing.cn'</span>, <span class="comment">// 接口的域名</span></span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">            pathRewrite: &#123;<span class="string">'^/img'</span>: <span class="string">''</span>&#125;  <span class="comment">// pathRewrite 来重写地址，将前缀 '/api' 转为 '/'。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Various Dev Server settings</span></span><br><span class="line">    host: <span class="string">'localhost'</span>, <span class="comment">// can be overwritten by process.env.HOST</span></span><br><span class="line">    port: <span class="number">4200</span>, <span class="comment">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="更多参数"><a href="#更多参数" class="headerlink" title="更多参数"></a>更多参数</h3><p>dev-server 使用了非常强大的 http-proxy-middleware , http-proxy-middleware 基于 http-proxy 实现的，可以查看 http-proxy 的源码和文档:<a href="https://github.com/nodejitsu/node-http-proxy。" target="_blank" rel="noopener">https://github.com/nodejitsu/node-http-proxy。</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">target：要使用url模块解析的url字符串</span><br><span class="line">forward：要使用url模块解析的url字符串</span><br><span class="line">agent：要传递给http（s）.request的对象（请参阅Node的https代理和http代理对象）</span><br><span class="line">ssl：要传递给https.createServer（）的对象</span><br><span class="line">ws：<span class="literal">true</span> / <span class="literal">false</span>，是否代理websockets</span><br><span class="line">xfwd：<span class="literal">true</span> / <span class="literal">false</span>，添加x-forward标头</span><br><span class="line">secure：<span class="literal">true</span> / <span class="literal">false</span>，是否验证SSL Certs</span><br><span class="line">toProxy：<span class="literal">true</span> / <span class="literal">false</span>，传递绝对URL作为路径（对代理代理很有用）</span><br><span class="line">prependPath：<span class="literal">true</span> / <span class="literal">false</span>，默认值：<span class="literal">true</span> - 指定是否要将目标的路径添加到代理路径</span><br><span class="line">ignorePath：<span class="literal">true</span> / <span class="literal">false</span>，默认值：<span class="literal">false</span> - 指定是否要忽略传入请求的代理路径（注意：如果需要，您必须附加/手动）。</span><br><span class="line">localAddress：要为传出连接绑定的本地接口字符串</span><br><span class="line">changeOrigin：<span class="literal">true</span> / <span class="literal">false</span>，默认值：<span class="literal">false</span> - 将主机标头的原点更改为目标URL</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://webpack.docschina.org/configuration/dev-server/#devserver-proxy" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a></li><li><a href="https://github.com/nodejitsu/node-http-proxy" target="_blank" rel="noopener">node-http-proxy</a></li><li><a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="noopener">API Proxying During Development</a></li></ul><p>转载自</p><ul><li><a href="https://www.jianshu.com/p/f489e7764cb8" target="_blank" rel="noopener">Webpack-dev-server的proxy用法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> WebPack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts实现图表间联动</title>
      <link href="/2019/06/13/Echarts%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E8%A1%8C%E4%B8%BA/"/>
      <url>/2019/06/13/Echarts%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>Echarts.js目前已经提供了connect功能，只要图标的legend一样，那么就能实现联动。<br>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart1 = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main1'</span>));</span><br><span class="line"><span class="keyword">var</span> myChart2 = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main2'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">'ECharts 入门示例'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">'axis'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        show : <span class="literal">true</span>,</span><br><span class="line">        feature : &#123;</span><br><span class="line">            mark : &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            dataView : &#123;<span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">readOnly</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">            magicType : &#123;<span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">type</span>: [<span class="string">'line'</span>, <span class="string">'bar'</span>, <span class="string">'stack'</span>, <span class="string">'tiled'</span>]&#125;,</span><br><span class="line">            restore : &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            saveAsImage : &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        data:[<span class="string">'销量'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;&#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        name: <span class="string">'销量'</span>,</span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        data: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myChart1.setOption(option);</span><br><span class="line">myChart2.setOption(option);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制联动的</span></span><br><span class="line"><span class="keyword">this</span>.$echarts.connect([myChart1,myChart2]);</span><br></pre></td></tr></table></figure></p><p>效果如下面的示例图，当鼠标经过图1的时候，这个时候有提示，然后让图2的提示也显示出来<br><img src="/img/echarts-connect.png" alt></p><p>如何关联？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别设置每个实例的 group id</span></span><br><span class="line">chart1.group = <span class="string">'group1'</span>;</span><br><span class="line">chart2.group = <span class="string">'group1'</span>;</span><br><span class="line">echarts.connect(<span class="string">'group1'</span>);</span><br><span class="line"><span class="comment">// 或者可以直接传入需要联动的实例数组</span></span><br><span class="line">echarts.connect([chart1, chart2]);</span><br></pre></td></tr></table></figure></p><h3 id="dataset"><a href="#dataset" class="headerlink" title="dataset"></a>dataset</h3><p>ECharts 4 开始支持了 dataset 组件用于单独的数据集声明，从而数据可以单独管理，被多个组件复用，并且可以基于数据指定数据到视觉的映射。这在不少场景下能带来使用上的方便。<br>dataset简单示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    legend: &#123;&#125;,</span><br><span class="line">    tooltip: &#123;&#125;,</span><br><span class="line">    dataset: &#123;</span><br><span class="line">        <span class="comment">// 提供一份数据。</span></span><br><span class="line">        source: [</span><br><span class="line">            [<span class="string">'product'</span>, <span class="string">'2015'</span>, <span class="string">'2016'</span>, <span class="string">'2017'</span>],</span><br><span class="line">            [<span class="string">'Matcha Latte'</span>, <span class="number">43.3</span>, <span class="number">85.8</span>, <span class="number">93.7</span>],</span><br><span class="line">            [<span class="string">'Milk Tea'</span>, <span class="number">83.1</span>, <span class="number">73.4</span>, <span class="number">55.1</span>],</span><br><span class="line">            [<span class="string">'Cheese Cocoa'</span>, <span class="number">86.4</span>, <span class="number">65.2</span>, <span class="number">82.5</span>],</span><br><span class="line">            [<span class="string">'Walnut Brownie'</span>, <span class="number">72.4</span>, <span class="number">53.9</span>, <span class="number">39.1</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 声明一个 X 轴，类目轴（category）。默认情况下，类目轴对应到 dataset 第一列。</span></span><br><span class="line">    xAxis: &#123;<span class="attr">type</span>: <span class="string">'category'</span>&#125;,</span><br><span class="line">    <span class="comment">// 声明一个 Y 轴，数值轴。</span></span><br><span class="line">    yAxis: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 声明多个 bar 系列，默认情况下，每个系列会自动对应到 dataset 的每一列。</span></span><br><span class="line">    series: [</span><br><span class="line">        &#123;<span class="attr">type</span>: <span class="string">'bar'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">type</span>: <span class="string">'bar'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">type</span>: <span class="string">'bar'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果图如下：<br><img src="/img/echarts-dataset-link.png" alt><br><a href="http://echarts.baidu.com/examples/editor.html?c=dataset-link" target="_blank" rel="noopener">来源 http://echarts.baidu.com/examples/editor.html?c=dataset-link</a></p><p>在这个样例中，随着鼠标在坐标轴上的移动，饼图会不断的变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">myChart.on(<span class="string">'updateAxisPointer'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xAxisInfo = event.axesInfo[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (xAxisInfo) &#123;</span><br><span class="line">        <span class="keyword">var</span> dimension = xAxisInfo.value + <span class="number">1</span>;</span><br><span class="line">        myChart.setOption(&#123;</span><br><span class="line">            series: &#123;</span><br><span class="line">                id: <span class="string">'pie'</span>,</span><br><span class="line">                label: &#123;</span><br><span class="line">                    formatter: <span class="string">'&#123;b&#125;: &#123;@['</span> + dimension + <span class="string">']&#125; (&#123;d&#125;%)'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                encode: &#123;</span><br><span class="line">                    value: dimension,</span><br><span class="line">                    tooltip: dimension</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>本质上是通过鼠标事件，不断获取xAxisInfo，然后根据获取到的xAxisInfo.value(dimension)重新绘制饼图。这个可视化过程中数据是以数据集形式呈现的，所以用的encode，具体介绍可以在<a href="https://www.echartsjs.com/tutorial.html#%E4%BD%BF%E7%94%A8%20dataset%20%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">https://www.echartsjs.com/tutorial.html#%E4%BD%BF%E7%94%A8%20dataset%20%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE</a> 看到。</p><h3 id="通过事件"><a href="#通过事件" class="headerlink" title="通过事件"></a>通过事件</h3><p><a href="https://www.echartsjs.com/tutorial.html#ECharts%20%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E8%A1%8C%E4%B8%BA" target="_blank" rel="noopener">Echarts事件介绍</a></p><p>ECharts 中的事件分为两种，一种是鼠标事件，在鼠标点击某个图形上会触发，还有一种是 调用 dispatchAction 后触发的事件。</p><p>ECharts 中支持的图表行为，通过 dispatchAction 触发<br><a href="https://www.echartsjs.com/api.html#action" target="_blank" rel="noopener">action</a></p><p>在 ECharts 中主要通过 on 方法添加事件处理函数，该文档描述了所有 ECharts 的事件列表。<br><a href="https://www.echartsjs.com/api.html#events" target="_blank" rel="noopener">events</a></p><p>之所以可以使用这个实现多图联动，实质上是一个图上发生鼠标移动事件后，调用另一个图，使其产生动作。比如mychart1和mychart2，如果获取到了mychart1的params信息，通过这些信息可以对应到mychart2的dataIndex、SeriesIndex，那么，就可以用这样的形式实现联动。</p><h4 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myChart.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是这个方法有一个不友好的地方就是只有用户点击到图中如：点、线、柱状图等上才可以触发点击事件，点击那一列的其他位置是没有作用的，因此我找到了另外一种方法实现这个需求，通过点击所在值的这一列就会触发（区域点击事件），实现代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">myChart.getZr().on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> point=[params.offsetX,params.offsetY];</span><br><span class="line">    <span class="keyword">if</span>(myChart.containPixel(<span class="string">'gird'</span>,point))&#123;</span><br><span class="line">        <span class="keyword">let</span> xIndex=myChart.convertFromPixel(&#123;<span class="attr">seriesIndex</span>:<span class="number">0</span>&#125;,</span><br><span class="line">              point)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> op=myChart.getOption();</span><br><span class="line">        <span class="keyword">let</span> name=op.xAxis[<span class="number">0</span>].data[xIndex];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="myChart-setOption"><a href="#myChart-setOption" class="headerlink" title="myChart.setOption"></a>myChart.setOption</h4><p>重新绘制</p><h4 id="myChart-dispatchAction"><a href="#myChart-dispatchAction" class="headerlink" title="myChart.dispatchAction"></a>myChart.dispatchAction</h4><p>触发图表行为，例如图例开关legendToggleSelect, 数据区域缩放dataZoom，显示提示框showTip等等，更多见官方文档。</p><p>payload 参数可以通过batch属性同时触发多个行为。</p><blockquote><p>注：在 ECharts 2.x 是通过 myChart.component.tooltip.showTip 这种形式调用相应的接口触发图表行为，入口很深，而且涉及到内部组件的组织。因此在 ECharts 3 里统一改为 dispatchAction 的形式。</p></blockquote><p>示例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">myChart.dispatchAction(&#123;</span><br><span class="line">    type: <span class="string">'dataZoom'</span>,</span><br><span class="line">    start: <span class="number">20</span>,</span><br><span class="line">    end: <span class="number">30</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 可以通过 batch 参数批量分发多个 action</span></span><br><span class="line">myChart.dispatchAction(&#123;</span><br><span class="line">    type: <span class="string">'dataZoom'</span>,</span><br><span class="line">    batch: [&#123;</span><br><span class="line">        <span class="comment">// 第一个 dataZoom 组件</span></span><br><span class="line">        start: <span class="number">20</span>,</span><br><span class="line">        end: <span class="number">30</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="comment">// 第二个 dataZoom 组件</span></span><br><span class="line">        dataZoomIndex: <span class="number">1</span>,</span><br><span class="line">        start: <span class="number">10</span>,</span><br><span class="line">        end: <span class="number">20</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级后端工程师进阶</title>
      <link href="/2019/06/12/%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6/"/>
      <url>/2019/06/12/%E5%88%9D%E7%BA%A7%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/learn-backend.png" alt></p><blockquote><p>Stay Hungry,Stay Foolish<br>初级后端工程师进阶</p></blockquote><h3 id="Javascript-amp-ES6-熟悉"><a href="#Javascript-amp-ES6-熟悉" class="headerlink" title="Javascript&amp;ES6(熟悉)"></a>Javascript&amp;ES6(熟悉)</h3><p>​<br>[1]    目标:可以熟练掌握Javascript和ES6的语法，可以在项目中熟练使用基本语法，可以使用Promise处理复杂回调。知道语言的Good Parts和Bad Parts。<br>[2]    推荐书籍:<br>    &emsp;a.  《ES6标准入门》<br>    &emsp;b.  《Javascript语言精粹》<br>    &emsp;c.  《Javascript高级程序指南》<br>[3]    推荐在线教程:<br>    &emsp;a.  <a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">ES6入门</a><br>    &emsp;b.  <a href="https://codeguide.bootcss.com/" target="_blank" rel="noopener">HTML/CSS/JS编码规范</a><br>    &emsp;c.  <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143470025281435e4e03117a74438aaf98c4f7b30b307000" target="_blank" rel="noopener">廖雪峰的javascript教程</a><br>[4]    推荐工具:<br>    &emsp;a.  VSCode<br>    &emsp;b.  <a href="https://eslint.bootcss.com/" target="_blank" rel="noopener">ESlint</a></p><h3 id="Python-amp-Flask-精通"><a href="#Python-amp-Flask-精通" class="headerlink" title="Python &amp; Flask(精通)"></a>Python &amp; Flask(精通)</h3><p>​<br>[1]    目标:熟练掌握Python 3.6语法，可以使用Flask实现类restful service的api。<br>[2]    推荐书籍:N.A.<br>[3]    推荐在线教程:<br>    &emsp;a.  <a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰的python教程</a><br>    &emsp;b.  <a href="https://docs.python.org/3.6/" target="_blank" rel="noopener">python官方文档</a><br>[4] 推荐工具:<br>    &emsp;a.  pycharm</p><h3 id="MongoDB-熟悉"><a href="#MongoDB-熟悉" class="headerlink" title="MongoDB(熟悉)"></a>MongoDB(熟悉)</h3><p>​<br>[1] 目标:熟练掌握MongoDB基础知识，可以使用MongoDB为Web服务提供数据存储<br>[2] 推荐书籍:<br>    &emsp;a.  《MongoDB权威指南》<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://docs.mongodb.com/?_ga=2.120015240.1062691917.1537102196-1035018505.1537102196" target="_blank" rel="noopener">mongodb官方文档</a><br>[4] 推荐工具:<br>    &emsp;a.  robo 3t</p><h3 id="HTML-amp-HTML5-熟悉"><a href="#HTML-amp-HTML5-熟悉" class="headerlink" title="HTML&amp;HTML5(熟悉)"></a>HTML&amp;HTML5(熟悉)</h3><p>[1]    目标:熟练掌握HTML/HTML5的语法特性，熟悉HTML5所有标签以及API。<br>[2]    推荐书籍:<br>    &emsp;a.  《HTML5秘籍》<br>[3]    推荐在线教程:<br>    &emsp;a.  <a href="https://www.w3cschool.cn/html5/" target="_blank" rel="noopener">W3CSchool教程</a><br>[4]    推荐工具:<br>    &emsp;a.  VSCode</p><h3 id="CSS-amp-CSS3-熟悉"><a href="#CSS-amp-CSS3-熟悉" class="headerlink" title="CSS&amp;CSS3(熟悉)"></a>CSS&amp;CSS3(熟悉)</h3><p>​<br>[1]    目标:熟练掌握CSS3特性，可以使用CSS实现常用的布局与动画效果。<br>[2]    推荐书籍:N.A.<br>[3]    推荐在线教程:<br>    &emsp;a.  <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener">MDN</a><br>    &emsp;b.  <a href="http://www.w3school.com.cn/css3/index.asp" target="_blank" rel="noopener">W3CSchool</a><br>[4]    推荐工具:<br>    &emsp;a.  vscode<br>    &emsp;b.  <a href="https://css.doyoe.com/" target="_blank" rel="noopener">css参考手册</a><br>    &emsp;c.  <a href="https://fontawesome.com/" target="_blank" rel="noopener">icon库</a><br>    &emsp;d.  <a href="https://www.sasscss.com/sass-guidelines/" target="_blank" rel="noopener">SASS</a></p><h3 id="HTTP-amp-HTTPS协议-精通"><a href="#HTTP-amp-HTTPS协议-精通" class="headerlink" title="HTTP&amp;HTTPS协议(精通)"></a>HTTP&amp;HTTPS协议(精通)</h3><p>​<br>[1]    目标:掌握HTTP协议的通信原理，在前后端调试中，可以理解HTTP报文请求的含义。可以使用HTTP对前端开发进行性能优化。理解HTTPS的安全性原理，可以在实际使用中使用HTTPS进行安全通信。<br>[2]    推荐书籍:<br>    &emsp;a.  《图解HTTP》<br>[3]    推荐在线教程:<br>    &emsp;a.  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noopener">MDN</a><br>    &emsp;b.  <a href="https://zhuanlan.zhihu.com/p/27395037" target="_blank" rel="noopener">HTTPS</a><br>    &emsp;c.  <a href="http://support.upyun.com/hc/kb/article/1048799/" target="_blank" rel="noopener">HTTP2协议</a><br>[4]    推荐工具:<br>    &emsp;a.  Google Chrome Developer Tools<br>    &emsp;b.  Postman<br>    &emsp;c.  Google Page Spead</p><h3 id="Bootstrap-3-了解"><a href="#Bootstrap-3-了解" class="headerlink" title="Bootstrap 3(了解)"></a>Bootstrap 3(了解)</h3><p>[1] 目标:熟练使用Bootstrap3进行响应式页面的开发，理解栅格系统，熟悉常用的组件与js api。<br>[2] 推荐书籍:N.A.<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://v3.bootcss.com/" target="_blank" rel="noopener">https://v3.bootcss.com/</a><br>[4] 推荐工具:N.A.</p><h3 id="jQuery-了解"><a href="#jQuery-了解" class="headerlink" title="jQuery(了解)"></a>jQuery(了解)</h3><p>​<br>[1] 目标:熟练掌握jQuery语法与API使用，可以使用jQuery进行Dom操作与网络请求<br>[2] 推荐书籍:N.A.<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://api.jquery.com/" target="_blank" rel="noopener">jQuery官方文档</a><br>    &emsp;b.  <a href="https://www.quanzhanketang.com/jquery/default.html" target="_blank" rel="noopener">快速入门</a><br>[4] 推荐工具:N.A.</p><h3 id="Vue-熟悉"><a href="#Vue-熟悉" class="headerlink" title="Vue(熟悉)"></a>Vue(熟悉)</h3><p>​<br>[1] 目标:熟练掌握Vue的框架特性与常用语法，可以使用Vue快速构建Web应用。<br>[2] 推荐书籍:N.A.<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://cn.vuejs.org/index.html" target="_blank" rel="noopener">https://cn.vuejs.org/index.html</a><br>[4] 推荐工具:N.A.</p><h3 id="Webpack-了解"><a href="#Webpack-了解" class="headerlink" title="Webpack (了解)"></a>Webpack (了解)</h3><p>[1] 目标:熟练掌握Webpack框架、语法，可以使用Webpack实现Web前端打包。<br>[2] 推荐书籍:N.A.<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">https://www.webpackjs.com/concepts/</a><br>[4] 推荐工具:N.A.</p><h3 id="Git-熟悉"><a href="#Git-熟悉" class="headerlink" title="Git(熟悉)"></a>Git(熟悉)</h3><p>[1] 目标: 熟悉Git基本语法与流程，可以使用类Gitflow流程进行源代码管理。<br>[2] 推荐书籍:<br>    &emsp;a.  《Git版本控制管理》<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://progit.bootcss.com/" target="_blank" rel="noopener">progit</a><br>[4] 推荐工具<br>    &emsp;a.  sourcetree<br>    &emsp;b.  gitkraken</p><h3 id="NodeJS-amp-Npm-熟悉"><a href="#NodeJS-amp-Npm-熟悉" class="headerlink" title="NodeJS &amp; Npm(熟悉)"></a>NodeJS &amp; Npm(熟悉)</h3><p>​<br>[1] 目标: 了解NodeJS和Npm的feature,可以使用npm安装常用包，使用NodeJS开发类Restful的api。<br>[2] 推荐书籍:<br>    &emsp;a.  《深入浅出nodejs》<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://nodejs.org/dist/latest-v8.x/docs/api/" target="_blank" rel="noopener">https://nodejs.org/dist/latest-v8.x/docs/api/</a><br>    &emsp;b.  <a href="https://www.npmjs.com.cn/" target="_blank" rel="noopener">https://www.npmjs.com.cn/</a><br>[4] 推荐工具:N.A.<br>​​</p><h3 id="Docker-掌握"><a href="#Docker-掌握" class="headerlink" title="Docker(掌握)"></a>Docker(掌握)</h3><p>​<br>[1] 目标: 掌握Docker基础知识，可以使用docker部署后端项目。<br>[2] 推荐书籍:<br>    &emsp;a.  《Docker技术入门与实战》<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官方文档</a><br>[4] 推荐工具:N.A.<br>​​</p><h3 id="Linux-and-Shell-掌握"><a href="#Linux-and-Shell-掌握" class="headerlink" title="Linux and Shell(掌握)"></a>Linux and Shell(掌握)</h3><p>​<br>[1] 目标: 了解Linux操作系统基本特性，熟练掌握常用的Shell命令<br>[2] 推荐书籍:<br>    &emsp;a.  《鸟哥的Linux私房菜》<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://www.imooc.com/course/list?c=linux" target="_blank" rel="noopener">https://www.imooc.com/course/list?c=linux</a><br>[4] 推荐工具:<br>    &emsp;a.  Ubuntu 16.04 LTS<br>​​</p><h3 id="Nginx服务器-掌握"><a href="#Nginx服务器-掌握" class="headerlink" title="Nginx服务器(掌握)"></a>Nginx服务器(掌握)</h3><p>​<br>[1] 目标: 熟悉Nginx服务器知识，会使用Nginx搭建web服务容器。<br>[2] 推荐书籍:<br>    &emsp;a.  《深入理解Nginx:模块开发与架构解析》<br>[3] 推荐教程:<br>    &emsp;a.  <a href="https://www.w3cschool.cn/nginx/" target="_blank" rel="noopener">https://www.w3cschool.cn/nginx/</a><br>[4] 推荐工具:N.A.</p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 读书 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品学习</title>
      <link href="/2019/06/12/%E4%BA%A7%E5%93%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/06/12/%E4%BA%A7%E5%93%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="交互学习"><a href="#交互学习" class="headerlink" title="交互学习"></a>交互学习</h3><ul><li><a href="http://www.woshipm.com/ucd/1489258.html" target="_blank" rel="noopener">人机交互指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/35184751" target="_blank" rel="noopener">人机交互指南2018中文版</a></li><li><a href="https://uiiiuiii.com/screen/ios.htm" target="_blank" rel="noopener">Ios设计规范</a></li></ul><h3 id="常用交互软件"><a href="#常用交互软件" class="headerlink" title="常用交互软件"></a>常用交互软件</h3><ul><li>Axure</li><li><a href="https://creative.adobe.com/zh-cn/products/download/xd" target="_blank" rel="noopener">XD</a></li><li>Sketch用于小图标</li><li>Xmind或Mindmanager</li></ul><h3 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h3><ul><li>《触动人心》</li><li>《启示录》</li><li>《点石成金》</li><li>《写给大家看的设计书》</li><li>《交互设计之路》</li><li>《情感化设计》</li><li>《可用性工程》</li><li>《简约至上：交互式设计四策略》</li><li>《设计中的设计》</li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些好用的插件</title>
      <link href="/2019/06/12/vue%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/06/12/vue%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul><li><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">element-ui</a> - 饿了么开发的一套为开发者、设计师和产品经理准备的基于Vue2.0的桌面端组件库</li><li><a href="https://www.iviewui.com/" target="_blank" rel="noopener">iview</a> - 一套基于Vue.js的高质量UI组件库</li><li><a href="https://vuetifyjs.com/zh-Hans/" target="_blank" rel="noopener">vuetify</a> - 为移动而生的Vue组件框架</li><li><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">mint-ui</a> - 基于 Vue.js 的移动端组件库</li><li><a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">vant</a> - 轻量、可靠的移动端Vue组件库</li><li><a href="https://muse-ui.org/#/zh-CN" target="_blank" rel="noopener">muse-ui</a> - 三端样式一致的响应式UI库</li><li><a href="https://fe-driver.github.io/vue-beauty" target="_blank" rel="noopener">vue-beauty</a> - 由vue和ant design创建的优美UI组件</li></ul><h3 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h3><ul><li><a href="https://github.com/wangdahoo/vue-scroller" target="_blank" rel="noopener">vue-scroller</a> - Vonic UI的功能性组件</li><li><a href="https://github.com/PeachScript/vue-infinite-loading" target="_blank" rel="noopener">vue-infinite-loading</a> - VueJS的无限滚动插件</li><li><a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noopener">vue-virtual-scroller</a> - 带任意数目数据的顺畅的滚动</li><li><a href="https://github.com/ElemeFE/vue-infinite-scroll" target="_blank" rel="noopener">vue-infinite-scroll</a> - VueJS的无限滚动指令</li></ul><h3 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h3><ul><li><a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a> - vue.js触摸滑动组件</li></ul><h3 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h3><ul><li><a href="https://github.com/surmon-china/vue-quill-editor" target="_blank" rel="noopener">vue-quill-editor</a> - 基于Quill适用于Vue2的富文本编辑器</li></ul><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><ul><li><a href="https://github.com/lian-yue/vue-upload-component" target="_blank" rel="noopener">vue-upload-component</a> - Vuejs文件上传组件</li><li><a href="https://github.com/Vanthink-UED/vue-core-image-upload" target="_blank" rel="noopener">vue-core-image-upload</a> - 轻量级的vue上传插件</li><li><a href="https://www.npmjs.com/package/vue-image-crop-upload" target="_blank" rel="noopener">vue-image-crop-upload</a> - vue图片剪裁上传组件</li></ul><h3 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h3><ul><li><a href="https://github.com/xyxiao001/vue-cropper" target="_blank" rel="noopener">vue-cropper</a> - 一个优雅的图片裁剪插件</li></ul><h3 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h3><ul><li><a href="https://www.npmjs.com/package/vuedraggable" target="_blank" rel="noopener">Vue.Draggable</a> - Draggable为基于Sortable.js的vue组件，用以实现拖拽功能</li><li><a href="https://github.com/jbaysolutions/vue-grid-layout" target="_blank" rel="noopener">vue-grid-layout</a> - 实现桌面拖拽布局</li></ul><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><ul><li><a href="https://www.echartsjs.com/" target="_blank" rel="noopener">Echarts</a> - ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等）</li><li><a href="http://antv.alipay.com/zh-cn/index.html" target="_blank" rel="noopener">AntV</a> - AntV是蚂蚁金服全新一代数据可视化解决方案，致力于提供一套简单方便、专业可靠、无限可能的数据可视化最佳实践</li><li><a href="https://www.highcharts.com.cn/" target="_blank" rel="noopener">HighCharts</a> - 兼容 IE6+、完美支持移动端、图表类型丰富、方便快捷的 HTML5 交互性图表库</li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/06/11/test/"/>
      <url>/2019/06/11/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> humanities </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue修饰符</title>
      <link href="/2019/06/11/vue%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2019/06/11/vue%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为了方便大家写代码，vue.js给大家提供了很多方便的修饰符，比如我们经常用到的取消冒泡，阻止默认事件等等</p></blockquote><h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><h4 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h4><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样只有当我们光标离开输入框的时候，它才会更新视图，相当于在onchange事件触发更新。</p><h4 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h4><p>我们经常需要过滤一下一些输入框中无意键入的空格，这时可以给v-model添加trim修饰符。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"value"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h4><p>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你先输入数字，那它就会限制你输入的只能是数字。<br>如果你先输入字符串，那它就相当于没有加.number</p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><h4 id="stop"><a href="#stop" class="headerlink" title=".stop"></a>.stop</h4><p>由于事件冒泡的机制，我们给元素绑定点击事件的时候，也会触发父级的点击事件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"test(2)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test(1)"</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//js</span><br><span class="line">test(e)&#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">&#125;</span><br><span class="line">//1</span><br><span class="line">//2</span><br></pre></td></tr></table></figure></p><p>给click事件绑定stop修饰符可以一键阻止事件冒泡，相当于调用了event.stopPropagation()方法。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"test(2)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"test(1)"</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//1</span><br></pre></td></tr></table></figure></p><h4 id="prevent"><a href="#prevent" class="headerlink" title=".prevent"></a>.prevent</h4><p>用于阻止事件的默认行为，例如，当点击提交按钮时阻止对表单的提交。相当于调用了event.preventDefault()方法。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意：修饰符可以同时使用多个,但是可能会因为顺序而有所不同。<br>用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。<br>也就是从左往右判断。</p></blockquote><h4 id="self"><a href="#self" class="headerlink" title=".self"></a>.self</h4><p>只当事件是从事件绑定的元素本身触发时才触发回调。像下面所示，刚刚我们从.stop时候知道子元素会冒泡到父元素导致触发父元素的点击事件，当我们加了这个.self以后，我们点击button不会触发父元素的点击事件test，只有当点击到父元素的时候（蓝色背景）才会test~从这个self的英文翻译过来就是‘自己，本身’可以看出这个修饰符的用法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span> @<span class="attr">click.self</span>=<span class="string">"test(2)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test(1)"</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="once"><a href="#once" class="headerlink" title=".once"></a>.once</h4><p>这个修饰符绑定了事件以后只能触发一次，第二次就不会触发。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"test(1)"</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>不像其它只能对原生的 DOM 事件起作用的修饰符，.once 修饰符还能被用到自定义的组件事件上。</p><h4 id="capture"><a href="#capture" class="headerlink" title=".capture"></a>.capture</h4><p>从上面我们知道了事件的冒泡，其实完整的事件机制是：捕获阶段–目标阶段–冒泡阶段。<br>默认的呢，是事件触发是从目标开始往上冒泡。<br>当我们加了这个.capture以后呢，我们就反过来了，事件触发从包含这个元素的顶层开始往下触发。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">"test(1)"</span>&gt;</span></span><br><span class="line">   obj1</span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">"test(2)"</span>&gt;</span></span><br><span class="line">     obj2</span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"test(3)"</span>&gt;</span></span><br><span class="line">       obj3</span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"test(4)"</span>&gt;</span></span><br><span class="line">         obj4</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> // 1 2 4 3</span><br></pre></td></tr></table></figure></p><p>从上面这个例子我们点击obj4的时候，就可以清楚地看出区别，obj1，obj2在捕获阶段就触发了事件，因此是先1后2，后面的obj3，obj4是默认的冒泡阶段触发，因此是先4然后冒泡到3。</p><h4 id="passive"><a href="#passive" class="headerlink" title=".passive"></a>.passive</h4><p>当我们在监听元素滚动事件的时候，会一直触发onscroll事件，在pc端是没啥问题的，但是在移动端，会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。</p></blockquote><h4 id="native"><a href="#native" class="headerlink" title=".native"></a>.native</h4><p>我们经常会写很多的小组件，有些小组件可能会绑定一些事件，但是，像下面这样绑定事件是不会触发的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">My-component</span> @<span class="attr">click</span>=<span class="string">"test(3)"</span>&gt;</span><span class="tag">&lt;/<span class="name">My-component</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>必须使用.native来修饰这个click事件（即<my-component @click.native="test(3)"></my-component>），可以理解为该修饰符的作用就是把一个vue组件转化为一个普通的HTML标签，</p><blockquote><p>注意：使用.native修饰符来操作普通HTML标签是会令事件失效的</p></blockquote><h3 id="v-bind修饰符"><a href="#v-bind修饰符" class="headerlink" title="v-bind修饰符"></a>v-bind修饰符</h3><h4 id="sync-2-3-0-新增"><a href="#sync-2-3-0-新增" class="headerlink" title=".sync(2.3.0+ 新增)"></a>.sync(2.3.0+ 新增)</h4><p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。</p><p>这也是为什么我们推荐以 update:myPropName 的模式触发事件取而代之。举个例子，在一个包含 title prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'update:title'</span>, newTitle)</span><br></pre></td></tr></table></figure></p><p>然后父组件可以监听那个事件并根据需要更新一个本地的数据属性。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:title</span>=<span class="string">"doc.title"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:update:title</span>=<span class="string">"doc.title = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>为了方便起见，我们为这种模式提供一个缩写，即 .sync 修饰符：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind:title.sync</span>=<span class="string">"doc.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>:title.sync=”isShow”其实是 @update:title=”tmp=&gt;title=tmp”语法糖。是其一种简写形式。</p><blockquote><p>注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 (例如 v-bind:title.sync=”doc.title + ‘!’” 是无效的)。取而代之的是，你只能提供你想要绑定的属性名，类似 v-model。</p></blockquote><p>当我们用一个对象同时设置多个 prop 的时候，也可以将这个 .sync 修饰符和 v-bind 配合使用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind.sync</span>=<span class="string">"doc"</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样会把 doc 对象中的每一个属性 (如 title) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 v-on 监听器。</p><blockquote><p>将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑。</p></blockquote><h4 id="prop"><a href="#prop" class="headerlink" title=".prop"></a>.prop</h4><p>要学习这个修饰符，我们首先要搞懂两个东西的区别。<br>Property：节点对象在内存中存储的属性，可以访问和设置。<br>Attribute：节点对象的其中一个属性( property )，值是一个对象，可以通过点访问法 document.getElementById(‘xx’).attributes 或者 document.getElementById(‘xx’).getAttributes(‘xx’) 读取，通过 document.getElementById(‘xx’).setAttribute(‘xx’,value) 新增和修改。<br>在标签里定义的所有属性包括 HTML 属性和自定义属性都会在 attributes 对象里以键值对的方式存在。</p><p>例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">class</span>=<span class="string">"el-input__inner"</span> <span class="attr">maxlength</span>=<span class="string">"32"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打印的 attribute 对象（NamedNodeMap 对象表示元素属性节点的无序集合）：<br><img src="/img/namednodemap.png" alt="对象（NamedNodeMap"></p><p>v-bind 默认绑定到 DOM 节点的 attribute 上，使用 .prop 修饰符后，会绑定到 property</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>使用 property 获取最新的值；</li><li>attribute 设置的自定义属性会在渲染后的 HTML 标签里显示，property 不会。</li></ul><h5 id="修饰符用途"><a href="#修饰符用途" class="headerlink" title="修饰符用途"></a>修饰符用途</h5><blockquote><p>通过自定义属性存储变量，避免暴露数据<br>防止污染 HTML 结构</p></blockquote><p>例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"11"</span> <span class="attr">:data</span>=<span class="string">"inputData"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">// 标签结构: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"11"</span> <span class="attr">data</span>=<span class="string">"inputData 的值"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">// input.data === undefined</span><br><span class="line">// input.attributes.data === this.inputData</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"11"</span> <span class="attr">:data.prop</span>=<span class="string">"inputData"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">// 标签结构: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"11"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">// input.data === this.inputData</span><br><span class="line">// input.attributes.data === undefined</span><br></pre></td></tr></table></figure></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue官方教程</a><br><a href="https://segmentfault.com/a/1190000016786254" target="_blank" rel="noopener">Vue修饰符</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中watch用法</title>
      <link href="/2019/06/11/vue%E4%B8%ADwatch%E7%94%A8%E6%B3%95/"/>
      <url>/2019/06/11/vue%E4%B8%ADwatch%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在vue中，使用watch来响应数据的变化。watch的用法大致有三种。下面代码是watch的一种简单的用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"cityName"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#root'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        cityName: <span class="string">'shanghai'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        cityName(newName, oldName) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>直接写一个监听处理函数，当每次监听到 cityName 值发生改变时，执行函数。也可以在所监听的数据后面直接加字符串形式的方法名：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    ...</span><br><span class="line">    watch: &#123;</span><br><span class="line">        cityName: <span class="string">'nameChange'</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="immediate和handler"><a href="#immediate和handler" class="headerlink" title="immediate和handler"></a>immediate和handler</h3><p>这样使用watch时有一个特点，就是当值第一次绑定的时候，不会执行监听函数，只有值发生改变才会执行。如果我们需要在最初绑定值的时候也执行函数，则就需要用到immediate属性。</p><p>比如当父组件向子组件动态传值时，子组件props首次获取到父组件传来的默认值时，也需要执行函数，此时就需要将immediate设为true。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    cityName: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    cityName: &#123;</span><br><span class="line">    　　handler(newName, oldName) &#123;</span><br><span class="line">      　　<span class="comment">// ...</span></span><br><span class="line">    　　&#125;,</span><br><span class="line">    　　immediate: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>监听的数据后面写成对象形式，包含handler方法和immediate，之前我们写的函数其实就是在写这个handler方法；<br>immediate表示在watch中首次绑定的时候，是否执行handler，值为true则表示在watch中声明的时候，就立即执行handler方法，值为false，则和一般使用watch一样，在数据发生变化的时候才执行handler。</p><h3 id="deep"><a href="#deep" class="headerlink" title="deep"></a>deep</h3><p>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"cityName.name"</span>/&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    cityName: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'shanghai'</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    cityName: &#123;</span><br><span class="line">      handler(newName, oldName) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    deep: <span class="literal">true</span>,</span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>设置deep: true 则可以监听到cityName.name的变化，此时会给cityName的所有属性都加上这个监听器，当对象属性较多时，每个属性值的变化都会执行handler。如果只需要监听对象中的一个属性值，则可以做以下优化：使用字符串的形式监听对象属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">'cityName.name'</span>: &#123;</span><br><span class="line">      handler(newName, oldName) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#125;,</span><br><span class="line">      deep: <span class="literal">true</span>,</span><br><span class="line">      immediate: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样只会给对象的某个特定的属性加监听器。</p><p>数组（一维、多维）的变化不需要通过深度监听，对象数组中对象的属性变化则需要deep深度监听。</p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>position中的sticky</title>
      <link href="/2019/06/11/position%E4%B8%AD%E7%9A%84sticky/"/>
      <url>/2019/06/11/position%E4%B8%AD%E7%9A%84sticky/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS-Position"><a href="#CSS-Position" class="headerlink" title="CSS Position"></a>CSS Position</h3><p>CSS的position有如下几种属性：</p><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</p><h4 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h4><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。</p><h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p><h4 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h4><p>不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform  属性非 none 时，容器由视口改为该祖先。</p><h4 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h4><p>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: sticky 对 table 元素的效果与 position: relative 相同。</p><h3 id="position-sticky"><a href="#position-sticky" class="headerlink" title="position:sticky"></a>position:sticky</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:sticky;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">10px</span>; <span class="comment">/* 阈值 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>position属性中最有意思的就是sticky了，设置了sticky的元素，在屏幕范围（viewport）时该元素的位置并不受到定位影响（设置是top、left等属性无效），当该元素的位置将要移出偏移范围时，定位又会变成fixed，根据设置的left、top等属性成固定位置的效果。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>该元素并不脱离文档流，任然保留元素原本在文档流的位置 </li><li>当元素在容器中被滚动超过指定的偏移值的时候，元素在容器内固定在指定的位置上 </li><li>元素固定的相对偏移是相对于离他最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量<br>他是一个新的css3属性，他的表现类似于position:relative和position:fixed的合体，在目标区域在屏幕中是可见的时候，他的行为就像是position:relative,当目标滚动超出目标区域的时候，他的表现就像是fixed，他会固定在目标的位置。这个属性的兼容性还不是很好，目前仍是一个试验性的属性，并不是W3C推荐的标准。它之所以会出现，也是因为监听scroll事件来实现粘性布局使浏览器进入慢滚动的模式，这与浏览器想要通过硬件加速来提升滚动的体验是相悖的。</li></ul><h4 id="生效条件"><a href="#生效条件" class="headerlink" title="生效条件"></a>生效条件</h4><p>需要注意的是，使用该属性有几个必要条件，否则会失效：</p><ul><li>父元素不能overflow:hidden或者overflow:auto属性。</li><li>必须指定top、bottom、left、right4个值之一，否则只会处于相对定位</li><li>父元素的高度不能低于sticky元素的高度</li><li>sticky元素仅在其父元素内生效</li></ul><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>　　<img src="/img/sticky.png" alt="sticky兼容性"></p>]]></content>
      
      
      <categories>
          
          <category> tech-notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
